// https://projecteuler.net/problem=2

// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// Considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

const isNumberEven = (number) => {
  return number%2 === 0
}

const sumOfEvenFibNumbers = (upperLimit) => {
  let totalSum = 0
  let nextToLastFibNum = 1
  let lastFibNum = 1
  while (lastFibNum < upperLimit) {
    totalSum += isNumberEven(lastFibNum) ? lastFibNum : 0
    lastFibNum = nextToLastFibNum + lastFibNum
    nextToLastFibNum = lastFibNum - nextToLastFibNum
  }
  return totalSum
}

// test
console.log("10 should equal:", sumOfEvenFibNumbers(33))
console.log("44 should equal:", sumOfEvenFibNumbers(35))

// solution
console.log(`solution: ${sumOfEvenFibNumbers(4000000)}`)
// 4613732
